#服务注册配置
eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://root:123456@localhost:1000/eureka/
  instance:
    prefer-ip-address: true
#server:
#  port: 8082
  
#spring配置  
spring:
#  application:
#    name: cloud-service-client
  cloud:
    discovery:
      client:
        simple:
          local:
            service-id: cloud-service-client:8082
  profiles:
    active: https
         
  # 配置数据库信息
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource   # 指定数据源为druid
    druid:
      # 数据源配置
      username: admin
      password: admin
      url: jdbc:mysql://localhost:3306/welfare?serverTimezone=GMT%2B8&characterEncoding=UTF-8&useSSL=false  # 设置时区
      driver-class-name: com.mysql.cj.jdbc.Driver
      # 初始化 最小 最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置多个英文逗号分隔
      filters: stat,wall
      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      # 是否启用StatFilter默认值true
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        session-stat-enable: false
        session-stat-max-count: 1000
        principal-cookie-name: admin
        principal-session-name: admin
        profile-enable: true
      # 根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html
      # http://localhost:8082/druid/index.html
      stat-view-servlet:
        url-pattern: /druid/*  # 监控页面访问路径
        # 允许清空统计数据
        reset-enable: true
        login-username: root
        login-password: 123456
        # StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数
        # deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问
        # 配置的格式
          # <IP>
          # 或者<IP>/<SUB_NET_MASK_size>其中128.242.127.1/24
          # 24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配,不支持IPV6。
        allow:
        deny:
        #activemq
  activemq:
    broker-url: tcp://127.0.0.1:61616
    user: admin
    password: admin
    close-timeout: 15s   # 在考虑结束之前等待的时间
    in-memory: true      # 默认代理URL是否应该在内存中。如果指定了显式代理，则忽略此值。
    non-blocking-redelivery: false  # 是否在回滚回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。
    send-timeout: 0     # 等待消息发送响应的时间。设置为0等待永远。
    queue-name: active.queue
    topic-name: active.topic.name.model

#  packages:
#    trust-all: true #不配置此项，会报错
  pool:
    enabled: true
    max-connections: 10   #连接池最大连接数
    idle-timeout: 30000   #空闲的连接过期时间，默认为30秒

#mybatis配置
mybatis:
   #关闭二级缓存使用redis缓存
   configuration:
    cache-enabled: true
   # 指定全局配置文件位置
   #config-location: classpath:mybatis/mybatis-config.xml
   # 指定sql映射文件位置
   mapper-locations: classpath:mybatis/mapper/*.xml
#日志
logging:
      level:
        com.kotei.service.mapper: DEBUG
        config: classpath:logback-spring.xml
        
# redis 配置
redis:
   port: 6379
   # Redis服务器连接密码（默认为空）
   password:
   host: localhost
   database: 0
   jedis:
    pool:
     #连接池最大连接数（使用负值表示没有限制）
     max-active: 300
     # 连接池中的最小空闲连接
     max-idle: 100
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
     max-wait: 10000
     # 连接超时时间（毫秒）
     timeout: 5000
